language: cpp

cache:
  - apt
  - packages
  - tools

branches:
  except:
    - /.*pp.eyor.*/

before_install:
  # we need a recent version of CMake
  # - sudo add-apt-repository -y ppa:andykimpe/cmake3
  # linux prereqisite packages
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update -qq; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo .build/linux/deploy_tools.sh; fi 
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update -qq; fi
#  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -qq -y g++-4.8; fi

services:
#  - mongodb
#  - redis-server
#  - postgresql
#  - mysql

addons:
#  postgresql: "9.3"

env:
  global: 
    TEST_NAME=""
    
before_script:
# - echo ${TEST_NAME}
# - chmod 755 ./travis/Linux/runtests.sh
# - chmod 755 ./travis/OSX/runtests.sh
# - if [ "$TRAVIS_OS_NAME" == "linux" ]; then mysql -u root -e 'create database pocotestdb;'; fi
# - if [ "$TRAVIS_OS_NAME" == "linux" ]; then mysql --version; fi
# - if [ "$TRAVIS_OS_NAME" == "linux" ]; then postgres --version; fi
# - sqlite3 -version
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then ./build/linux/genproj.sh; fi
        - 

matrix:
  fast_finish: true

  include:
    - env:    TEST_NAME="Linux GCC Debug Static"
      compiler: gcc
      script:
        - make -f generators.make configuration=Linux64-gcc_debug-static verbose=1
        - make -f trader.make     configuration=Linux64-gcc_debug-static verbose=1

    - env:    TEST_NAME="Linux GCC Debug Shared"
      compiler: gcc
      script:
        - make -f generators.make configuration=Linux64-gcc_debug-shared verbose=1
        - make -f trader.make     configuration=Linux64-gcc_debug-shared verbose=1

    - env:    TEST_NAME="Linux GCC Release Static"
      compiler: gcc
      script:
        - make -f generators.make configuration=Linux64-gcc_release-static verbose=1
        - make -f trader.make     configuration=Linux64-gcc_release-static verbose=1

    - env:    TEST_NAME="Linux GCC Release Shared"
      compiler: gcc
      script:
        - make -f generators.make configuration=Linux64-gcc_release-shared verbose=1
        - make -f trader.make     configuration=Linux64-gcc_release-shared verbose=1

  include:
    - env:    TEST_NAME="Linux Clang Debug Static"
      compiler: clang
      script:
        - make -f generators.make configuration=Linux64-clang_debug-static verbose=1
        - make -f trader.make     configuration=Linux64-clang_debug-static verbose=1

    - env:    TEST_NAME="Linux Clang Debug Shared"
      compiler: clang
      script:
        - make -f generators.make configuration=Linux64-clang_debug-shared verbose=1
        - make -f trader.make     configuration=Linux64-clang_debug-shared verbose=1

    - env:    TEST_NAME="Linux Clang Release Static"
      compiler: clang
      script:
        - make -f generators.make configuration=Linux64-clang_release-static verbose=1
        - make -f trader.make     configuration=Linux64-clang_release-static verbose=1

    - env:    TEST_NAME="Linux Clang Release Shared"
      compiler: clang
      script:
        - make -f generators.make configuration=Linux64-clang_release-shared verbose=1
        - make -f trader.make     configuration=Linux64-clang_release-shared verbose=1

    # QA jobs for code analytics and metrics
    # build documentation and release
#    - env:    TEST_NAME="Linux documentation & release"
#      compiler: gcc
#      script:
#        - export CC="gcc"
#        - export CXX="g++"
#        - . env.sh && mkdoc all && mkrel all

    # static code analysis with cppcheck (we can add --enable=all later)
    - env:    TEST_NAME="cppcheck"
      script: cppcheck --force --quiet --inline-suppr -j2 -ipackages -ideps -itools .
    # search for TODO within source tree
    - env:    TEST_NAME="TODO"
      script: grep -r TODO *
    # search for FIXME within source tree
    - env:    TEST_NAME="FIXME"
      script: grep -r FIXME *
    # search for HACK within source tree
    - env:    TEST_NAME="HACK"
      script: grep -r HACK *
    # some statistics about the code base
    - env:    TEST_NAME="sloccount"
      script: sloccount .
